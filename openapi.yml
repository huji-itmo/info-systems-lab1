openapi: 3.0.3
info:
  title: Space Marine Management API
  version: 1.0.0
  description: API for managing Space Marines, their Coordinates, and Chapters with full CRUD support.

servers:
  - url: http://localhost:8080/api
    description: Local development server

paths:
  # ================
  # SPACE MARINES
  # ================

  /space-marines:
    get:
      summary: Get all Space Marines
      operationId: getAllSpaceMarines
      responses:
        "200":
          description: List of Space Marines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SpaceMarine"
    post:
      summary: Create a new Space Marine
      operationId: createSpaceMarine
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpaceMarineCreateRequest"
      responses:
        "201":
          description: Space Marine created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceMarine"
        "400":
          description: Invalid input

  /space-marines/{id}:
    get:
      summary: Get a Space Marine by ID
      operationId: getSpaceMarineById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        "200":
          description: Space Marine found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceMarine"
        "404":
          description: Space Marine not found

    put:
      summary: Update a Space Marine by ID
      operationId: updateSpaceMarine
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SpaceMarineUpdateRequest"
      responses:
        "200":
          description: Space Marine updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceMarine"
        "400":
          description: Invalid input
        "404":
          description: Space Marine not found

    delete:
      summary: Delete a Space Marine by ID
      operationId: deleteSpaceMarine
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        "204":
          description: Space Marine deleted
        "404":
          description: Space Marine not found

  # ============
  # COORDINATES
  # ============

  /coordinates:
    get:
      summary: Get all Coordinates
      operationId: getAllCoordinates
      responses:
        "200":
          description: List of Coordinates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Coordinates"
    post:
      summary: Create new Coordinates
      operationId: createCoordinates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Coordinates"
      responses:
        "201":
          description: Coordinates created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoordinatesWithId"
        "400":
          description: Invalid input

  /coordinates/{id}:
    get:
      summary: Get Coordinates by ID
      operationId: getCoordinatesById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Coordinates found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoordinatesWithId"
        "404":
          description: Coordinates not found

    put:
      summary: Update Coordinates by ID
      operationId: updateCoordinates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Coordinates"
      responses:
        "200":
          description: Coordinates updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoordinatesWithId"
        "400":
          description: Invalid input
        "404":
          description: Coordinates not found

    delete:
      summary: Delete Coordinates by ID
      operationId: deleteCoordinates
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "204":
          description: Coordinates deleted
        "404":
          description: Coordinates not found

  # =========
  # CHAPTERS
  # =========

  /chapters:
    get:
      summary: Get all Chapters
      operationId: getAllChapters
      responses:
        "200":
          description: List of Chapters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chapter"
    post:
      summary: Create a new Chapter
      operationId: createChapter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Chapter"
      responses:
        "201":
          description: Chapter created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChapterWithId"
        "400":
          description: Invalid input

  /chapters/{id}:
    get:
      summary: Get a Chapter by ID
      operationId: getChapterById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: Chapter found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChapterWithId"
        "404":
          description: Chapter not found

    put:
      summary: Update a Chapter by ID
      operationId: updateChapter
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Chapter"
      responses:
        "200":
          description: Chapter updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChapterWithId"
        "400":
          description: Invalid input
        "404":
          description: Chapter not found

    delete:
      summary: Delete a Chapter by ID
      operationId: deleteChapter
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "204":
          description: Chapter deleted
        "404":
          description: Chapter not found

components:
  schemas:
    # === SPACE MARINE ===

    SpaceMarine:
      type: object
      required:
        - id
        - name
        - coordinatesId
        - creationDate
        - chapterId
        - health
        - weaponType
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          description: Unique auto-generated ID (> 0)
        name:
          type: string
          minLength: 1
          description: Non-empty, non-null name
        coordinatesId:
          type: integer
          format: int64
          minimum: 1
          description: ID of associated Coordinates
        creationDate:
          type: string
          format: date-time
          description: Auto-generated creation timestamp
        chapterId:
          type: integer
          format: int64
          minimum: 1
          description: ID of associated Chapter
        health:
          type: integer
          format: int64
          minimum: 1
          description: Health must be > 0
        loyal:
          type: boolean
          nullable: true
        category:
          type: string
          nullable: true
          enum: [AGGRESSOR, INCEPTOR, TACTICAL, CHAPLAIN, APOTHECARY]
        weaponType:
          type: string
          enum: [BOLTGUN, HEAVY_BOLTGUN, FLAMER, HEAVY_FLAMER, MULTI_MELTA]

    SpaceMarineCreateRequest:
      type: object
      required:
        - name
        - coordinatesId
        - chapterId
        - health
        - weaponType
      properties:
        name:
          type: string
          minLength: 1
        coordinatesId:
          type: integer
          format: int64
          minimum: 1
        chapterId:
          type: integer
          format: int64
          minimum: 1
        health:
          type: integer
          format: int64
          minimum: 1
        loyal:
          type: boolean
          nullable: true
        category:
          type: string
          nullable: true
          enum: [AGGRESSOR, INCEPTOR, TACTICAL, CHAPLAIN, APOTHECARY]
        weaponType:
          type: string
          enum: [BOLTGUN, HEAVY_BOLTGUN, FLAMER, HEAVY_FLAMER, MULTI_MELTA]

    SpaceMarineUpdateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        coordinatesId:
          type: integer
          format: int64
          minimum: 1
        chapterId:
          type: integer
          format: int64
          minimum: 1
        health:
          type: integer
          format: int64
          minimum: 1
        loyal:
          type: boolean
          nullable: true
        category:
          type: string
          nullable: true
          enum: [AGGRESSOR, INCEPTOR, TACTICAL, CHAPLAIN, APOTHECARY]
        weaponType:
          type: string
          enum: [BOLTGUN, HEAVY_BOLTGUN, FLAMER, HEAVY_FLAMER, MULTI_MELTA]

    # === COORDINATES ===

    Coordinates:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
          format: int64
        y:
          type: number
          format: float
          maximum: 343
          description: Must be ≤ 343

    CoordinatesWithId:
      allOf:
        - $ref: "#/components/schemas/Coordinates"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              minimum: 1

    # === CHAPTER ===

    Chapter:
      type: object
      required:
        - name
        - marinesCount
      properties:
        name:
          type: string
          minLength: 1
          description: Non-empty, non-null name
        marinesCount:
          type: integer
          format: int64
          minimum: 1
          maximum: 1000
          description: Must be between 1 and 1000

    ChapterWithId:
      allOf:
        - $ref: "#/components/schemas/Chapter"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              minimum: 1
